---
export interface Props{
    icon: icons
    [key: string]: any
}

export type icons = "IconSteam"| "IconCVList"| "IconPaypal"| "IconEmail"| "IconLinkedin"| "IconSun"| "IconGithub"| "IconTwitter"| "IconInstagram"| "IconUser"| "IconHome"| "IconBlog"| "IconMenu"| "IconAstro";

const { icon, ...attributes } = Astro.props as Props;

// noinspection TypeScriptCheckImport
const { default: svg } = await import(`./${icon}.svg?raw`);

function addAttributesToInnerHTMLString(innerHTML: string, attributes: Omit<Props, "icon">) {
    const attributesString = Object.entries(attributes)
        .map(([key, value]) => `${key}="${value}"`)
        .join(' ');

    return innerHTML.replace(/^<svg/, `<svg ${attributesString}`);
}

const innerHTML = addAttributesToInnerHTMLString(svg, attributes);

---

<Fragment {...attributes} set:html={innerHTML}/>